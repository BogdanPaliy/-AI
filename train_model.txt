scripts/train_model.py

import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

from src.utils import helpers
from src.visualization.result_visualizer import ResultVisualizer

from src.modeling.model_trainer import ModelTrainer  
from src.modeling.feature_selector import FeatureSelector

DATA_PATH = "data/processed/cleaned_dataset.csv"
MODEL_PATH = "models/confidential_classifier.pkl"
REPORTS_DIR = "reports/visualizations"
TEXT_COLUMN = "text"
LABEL_COLUMN = "label"

def main():
    logger = helpers.setup_logger()
    logger.info

    try:
        df = helpers.load_and_clean_csv(DATA_PATH, text_column=TEXT_COLUMN, label_column=LABEL_COLUMN)
        logger.info(f"{len(df)} записів")
    except Exception as e:
        logger.error(f"х: {e}")
        return

    X_train, X_test, y_train, y_test = helpers.split_data(df)
 
    vectorizer = TfidfVectorizer(max_features=5000)
    X_train_vec = vectorizer.fit_transform(X_train)
    X_test_vec = vectorizer.transform(X_test)

    selector = FeatureSelector()
    X_train_sel, X_test_sel = selector.select_features(X_train_vec, y_train, X_test_vec)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_sel, y_train)
    logger.info

    helpers.save_model(model, MODEL_PATH)
    helpers.save_model(vectorizer, MODEL_PATH.replace(".pkl", "_vectorizer.pkl"))
    logger.info(f"М {MODEL_PATH}")

    y_pred = model.predict(X_test_sel)
    report = classification_report(y_test, y_pred)
    print(report)
    logger.info

    visualizer = ResultVisualizer(output_dir=REPORTS_DIR)
    class_names = sorted(df[LABEL_COLUMN].unique())

    visualizer.plot_confusion_matrix(y_test, y_pred, class_names)
    visualizer.plot_classification_metrics(y_test, y_pred)

    if hasattr(model, "feature_importances_"):
        visualizer.plot_feature_importance(
            feature_names=vectorizer.get_feature_names_out(),
            importances=model.feature_importances_,
            top_n=25
        )

    logger.info


if __name__ == "__main__":
    main()
