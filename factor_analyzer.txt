src/analysis/factor_analyzer.py 

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.decomposition import PCA
from sklearn.feature_selection import chi2
from sklearn.preprocessing import LabelEncoder

class FactorAnalyzer:
    def __init__(self, n_top_features=20):
        self.vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))
        self.n_top_features = n_top_features
        self.feature_names = None

    def analyze_feature_importance(self, data_path, output_path="reports/feature_importance.png"):
        print("[INFO]")
        df = pd.read_csv(data_path)

        if 'text' not in df.columns or 'label' not in df.columns:
            raise ValueError("'text' і 'label'")

        print("[INFO]")
        X = self.vectorizer.fit_transform(df['text'])
        y = LabelEncoder().fit_transform(df['label'])
        self.feature_names = self.vectorizer.get_feature_names_out()

        print("[INFO]")
        clf = RandomForestClassifier(n_estimators=100, random_state=42)
        clf.fit(X, y)

        importances = clf.feature_importances_
        top_indices = importances.argsort()[-self.n_top_features:][::-1]
        top_features = self.feature_names[top_indices]
        top_importances = importances[top_indices]

        print("[INFO]")
        plt.figure(figsize=(10, 6))
        sns.barplot(x=top_importances, y=top_features, palette="viridis")
        plt.title
        plt.xlabel
        plt.tight_layout()

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        plt.savefig(output_path)
        plt.close()
        print(f"[INFO] {output_path}")

    def perform_pca(self, data_path, output_path="reports/pca_plot.png"):
        print("[INFO]")
        df = pd.read_csv(data_path)

        if 'text' not in df.columns or 'label' not in df.columns:
            raise ValueError("'text' і 'label' у датасеті.")

        X = self.vectorizer.fit_transform(df['text'])
        y = LabelEncoder().fit_transform(df['label'])

        print("[INFO]")
        pca = PCA(n_components=2)
        components = pca.fit_transform(X.toarray())

        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=components[:, 0], y=components[:, 1], hue=y, palette="Set2")
        plt.title("(PCA)")
        plt.xlabel("1")
        plt.ylabel("2")
        plt.tight_layout()

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        plt.savefig(output_path)
        plt.close()
        print(f"[INFO] PCA {output_path}")


if __name__ == "__main__":
    analyzer = FactorAnalyzer(n_top_features=15)
    analyzer.analyze_feature_importance("data/processed/cleaned_data.csv")
    analyzer.perform_pca("data/processed/cleaned_data.csv")