src/visualization/result_visualizer.py

import matplotlib.pyplot as plt
import seaborn as sns
import os
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
import pandas as pd


class ResultVisualizer:
    def __init__(self, output_dir="reports/visualizations"):
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)

    def plot_confusion_matrix(self, y_true, y_pred, class_names, filename="confusion_matrix.png"):
        cm = confusion_matrix(y_true, y_pred, labels=class_names)
        plt.figure(figsize=(8, 6))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
        plt.xlabel
        plt.ylabel
        plt.title
        path = os.path.join(self.output_dir, filename)
        plt.tight_layout()
        plt.savefig(path)
        plt.close()
        print(f"[INFO] {path}")

    def plot_classification_metrics(self, y_true, y_pred, filename="classification_report.png"):
        report = classification_report(y_true, y_pred, output_dict=True)
        df = pd.DataFrame(report).transpose()

        plt.figure(figsize=(10, 6))
        sns.heatmap(df.iloc[:-1, :-1], annot=True, cmap="YlGnBu", fmt=".2f")
        plt.title("(precision, recall, f1-score)")
        plt.tight_layout()
        path = os.path.join(self.output_dir, filename)
        plt.savefig(path)
        plt.close()
        print(f"[INFO] {path}")

    def plot_feature_importance(self, feature_names, importances, top_n=20, filename="feature_importance.png"):
        indices = np.argsort(importances)[-top_n:][::-1]
        top_features = [feature_names[i] for i in indices]
        top_importances = importances[indices]

        plt.figure(figsize=(10, 6))
        sns.barplot(x=top_importances, y=top_features, palette="crest")
        plt.title(f"Топ-{top_n}")
        plt.xlabel
        plt.tight_layout()
        path = os.path.join(self.output_dir, filename)
        plt.savefig(path)
        plt.close()
        print(f"[INFO]  у {path}")